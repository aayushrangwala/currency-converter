// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: v1alpha1/currencyconverter/currency_converter_server.proto

package api_proto_v1alpha1_currencyconverter

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to get a currency with value to be converted to another currency.
type ConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the type of currency we want to convert.
	From *Currency `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the currency code we want to convert it to.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Optionla. provider to be used for exchange rates. [default: CurrencyLayer]
	ExchangeProvider string `protobuf:"bytes,3,opt,name=exchange_provider,json=exchangeProvider,proto3" json:"exchange_provider,omitempty"`
}

func (x *ConversionRequest) Reset() {
	*x = ConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionRequest) ProtoMessage() {}

func (x *ConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionRequest.ProtoReflect.Descriptor instead.
func (*ConversionRequest) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{0}
}

func (x *ConversionRequest) GetFrom() *Currency {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ConversionRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ConversionRequest) GetExchangeProvider() string {
	if x != nil {
		return x.ExchangeProvider
	}
	return ""
}

// Response with the converted currency.
type ConversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// converted is the converted currency with code and value.
	Converted *Currency `protobuf:"bytes,1,opt,name=converted,proto3" json:"converted,omitempty"`
	// from is the source currency with code and value.
	From *Currency `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// rate of exchange from the source and target currencies.
	ExchangeRate float32 `protobuf:"fixed32,3,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// It is the conversion timestamp.
	ConversionDatetime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=conversion_datetime,json=conversionDatetime,proto3" json:"conversion_datetime,omitempty"`
	// timestamp at which the exchange rate was taken from.
	ExchangeRateDatetime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=exchange_rate_datetime,json=exchangeRateDatetime,proto3" json:"exchange_rate_datetime,omitempty"`
}

func (x *ConversionResponse) Reset() {
	*x = ConversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionResponse) ProtoMessage() {}

func (x *ConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionResponse.ProtoReflect.Descriptor instead.
func (*ConversionResponse) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{1}
}

func (x *ConversionResponse) GetConverted() *Currency {
	if x != nil {
		return x.Converted
	}
	return nil
}

func (x *ConversionResponse) GetFrom() *Currency {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ConversionResponse) GetExchangeRate() float32 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *ConversionResponse) GetConversionDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConversionDatetime
	}
	return nil
}

func (x *ConversionResponse) GetExchangeRateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExchangeRateDatetime
	}
	return nil
}

// BatchConversionRequest represents the request to convert currencies in batch.
type BatchConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List/Array of currencies to be requested for conversions.
	Currencies []*ConversionRequest `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
	// Optional. (internal) limit of a batch size allowed
	BatchLimit uint64 `protobuf:"varint,2,opt,name=batch_limit,json=batchLimit,proto3" json:"batch_limit,omitempty"`
}

func (x *BatchConversionRequest) Reset() {
	*x = BatchConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConversionRequest) ProtoMessage() {}

func (x *BatchConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConversionRequest.ProtoReflect.Descriptor instead.
func (*BatchConversionRequest) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{2}
}

func (x *BatchConversionRequest) GetCurrencies() []*ConversionRequest {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *BatchConversionRequest) GetBatchLimit() uint64 {
	if x != nil {
		return x.BatchLimit
	}
	return 0
}

// BatchConversionResponse represents the response to convert currencies in batch.
type BatchConversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List/Array of currencies which are converted.
	Currencies []*ConversionResponse `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
}

func (x *BatchConversionResponse) Reset() {
	*x = BatchConversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConversionResponse) ProtoMessage() {}

func (x *BatchConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConversionResponse.ProtoReflect.Descriptor instead.
func (*BatchConversionResponse) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{3}
}

func (x *BatchConversionResponse) GetCurrencies() []*ConversionResponse {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// request for exchange rates for the supported currencies.
type ListExchangeRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *OffsetPaginationOptions `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Optional. provider to be used for exchange rates. [default: CurrencyLayer]
	ExchangeProvider string `protobuf:"bytes,2,opt,name=exchange_provider,json=exchangeProvider,proto3" json:"exchange_provider,omitempty"`
	// Include total count of exchange rates.
	IncludeTotalCount bool `protobuf:"varint,3,opt,name=include_total_count,json=includeTotalCount,proto3" json:"include_total_count,omitempty"`
}

func (x *ListExchangeRatesRequest) Reset() {
	*x = ListExchangeRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeRatesRequest) ProtoMessage() {}

func (x *ListExchangeRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeRatesRequest.ProtoReflect.Descriptor instead.
func (*ListExchangeRatesRequest) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{4}
}

func (x *ListExchangeRatesRequest) GetPagination() *OffsetPaginationOptions {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListExchangeRatesRequest) GetExchangeProvider() string {
	if x != nil {
		return x.ExchangeProvider
	}
	return ""
}

func (x *ListExchangeRatesRequest) GetIncludeTotalCount() bool {
	if x != nil {
		return x.IncludeTotalCount
	}
	return false
}

// response with the list of exchange rates for the supported currencies.
type ListExchangeRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of currencies and their current rate.
	Currencies []*Currency `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
	// total count.
	TotalCount float64 `protobuf:"fixed64,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// timestamp at which the exchange rate was taken from.
	ExchangeRateDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=exchange_rate_datetime,json=exchangeRateDatetime,proto3" json:"exchange_rate_datetime,omitempty"`
}

func (x *ListExchangeRatesResponse) Reset() {
	*x = ListExchangeRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeRatesResponse) ProtoMessage() {}

func (x *ListExchangeRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeRatesResponse.ProtoReflect.Descriptor instead.
func (*ListExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{5}
}

func (x *ListExchangeRatesResponse) GetCurrencies() []*Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *ListExchangeRatesResponse) GetTotalCount() float64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListExchangeRatesResponse) GetExchangeRateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExchangeRateDatetime
	}
	return nil
}

// Currency is the object representing a currency with the code and value of it.
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is the standardised currency code for a specific country.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// value is the non-negative value of that currency.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{6}
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Options to paginate a response using offsets.
type OffsetPaginationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Offset at which to start returning records.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional. Number of records to return.
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *OffsetPaginationOptions) Reset() {
	*x = OffsetPaginationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetPaginationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetPaginationOptions) ProtoMessage() {}

func (x *OffsetPaginationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetPaginationOptions.ProtoReflect.Descriptor instead.
func (*OffsetPaginationOptions) Descriptor() ([]byte, []int) {
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP(), []int{7}
}

func (x *OffsetPaginationOptions) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *OffsetPaginationOptions) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

var File_v1alpha1_currencyconverter_currency_converter_server_proto protoreflect.FileDescriptor

var file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x74, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x63, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x17,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x32, 0xb7, 0x04, 0x0a, 0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xa2, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x38, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0xb8, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x42, 0x26, 0x5a,
	0x24, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescOnce sync.Once
	file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescData = file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDesc
)

func file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescGZIP() []byte {
	file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescOnce.Do(func() {
		file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescData)
	})
	return file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDescData
}

var file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_v1alpha1_currencyconverter_currency_converter_server_proto_goTypes = []interface{}{
	(*ConversionRequest)(nil),         // 0: api.proto.v1alpha1.currency.converter.ConversionRequest
	(*ConversionResponse)(nil),        // 1: api.proto.v1alpha1.currency.converter.ConversionResponse
	(*BatchConversionRequest)(nil),    // 2: api.proto.v1alpha1.currency.converter.BatchConversionRequest
	(*BatchConversionResponse)(nil),   // 3: api.proto.v1alpha1.currency.converter.BatchConversionResponse
	(*ListExchangeRatesRequest)(nil),  // 4: api.proto.v1alpha1.currency.converter.ListExchangeRatesRequest
	(*ListExchangeRatesResponse)(nil), // 5: api.proto.v1alpha1.currency.converter.ListExchangeRatesResponse
	(*Currency)(nil),                  // 6: api.proto.v1alpha1.currency.converter.Currency
	(*OffsetPaginationOptions)(nil),   // 7: api.proto.v1alpha1.currency.converter.OffsetPaginationOptions
	(*timestamppb.Timestamp)(nil),     // 8: google.protobuf.Timestamp
}
var file_v1alpha1_currencyconverter_currency_converter_server_proto_depIdxs = []int32{
	6,  // 0: api.proto.v1alpha1.currency.converter.ConversionRequest.from:type_name -> api.proto.v1alpha1.currency.converter.Currency
	6,  // 1: api.proto.v1alpha1.currency.converter.ConversionResponse.converted:type_name -> api.proto.v1alpha1.currency.converter.Currency
	6,  // 2: api.proto.v1alpha1.currency.converter.ConversionResponse.from:type_name -> api.proto.v1alpha1.currency.converter.Currency
	8,  // 3: api.proto.v1alpha1.currency.converter.ConversionResponse.conversion_datetime:type_name -> google.protobuf.Timestamp
	8,  // 4: api.proto.v1alpha1.currency.converter.ConversionResponse.exchange_rate_datetime:type_name -> google.protobuf.Timestamp
	0,  // 5: api.proto.v1alpha1.currency.converter.BatchConversionRequest.currencies:type_name -> api.proto.v1alpha1.currency.converter.ConversionRequest
	1,  // 6: api.proto.v1alpha1.currency.converter.BatchConversionResponse.currencies:type_name -> api.proto.v1alpha1.currency.converter.ConversionResponse
	7,  // 7: api.proto.v1alpha1.currency.converter.ListExchangeRatesRequest.pagination:type_name -> api.proto.v1alpha1.currency.converter.OffsetPaginationOptions
	6,  // 8: api.proto.v1alpha1.currency.converter.ListExchangeRatesResponse.currencies:type_name -> api.proto.v1alpha1.currency.converter.Currency
	8,  // 9: api.proto.v1alpha1.currency.converter.ListExchangeRatesResponse.exchange_rate_datetime:type_name -> google.protobuf.Timestamp
	0,  // 10: api.proto.v1alpha1.currency.converter.CurrencyConverterService.Convert:input_type -> api.proto.v1alpha1.currency.converter.ConversionRequest
	2,  // 11: api.proto.v1alpha1.currency.converter.CurrencyConverterService.BatchConvert:input_type -> api.proto.v1alpha1.currency.converter.BatchConversionRequest
	4,  // 12: api.proto.v1alpha1.currency.converter.CurrencyConverterService.ListExchangeRates:input_type -> api.proto.v1alpha1.currency.converter.ListExchangeRatesRequest
	1,  // 13: api.proto.v1alpha1.currency.converter.CurrencyConverterService.Convert:output_type -> api.proto.v1alpha1.currency.converter.ConversionResponse
	3,  // 14: api.proto.v1alpha1.currency.converter.CurrencyConverterService.BatchConvert:output_type -> api.proto.v1alpha1.currency.converter.BatchConversionResponse
	5,  // 15: api.proto.v1alpha1.currency.converter.CurrencyConverterService.ListExchangeRates:output_type -> api.proto.v1alpha1.currency.converter.ListExchangeRatesResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_v1alpha1_currencyconverter_currency_converter_server_proto_init() }
func file_v1alpha1_currencyconverter_currency_converter_server_proto_init() {
	if File_v1alpha1_currencyconverter_currency_converter_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchConversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExchangeRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExchangeRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetPaginationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1alpha1_currencyconverter_currency_converter_server_proto_goTypes,
		DependencyIndexes: file_v1alpha1_currencyconverter_currency_converter_server_proto_depIdxs,
		MessageInfos:      file_v1alpha1_currencyconverter_currency_converter_server_proto_msgTypes,
	}.Build()
	File_v1alpha1_currencyconverter_currency_converter_server_proto = out.File
	file_v1alpha1_currencyconverter_currency_converter_server_proto_rawDesc = nil
	file_v1alpha1_currencyconverter_currency_converter_server_proto_goTypes = nil
	file_v1alpha1_currencyconverter_currency_converter_server_proto_depIdxs = nil
}
