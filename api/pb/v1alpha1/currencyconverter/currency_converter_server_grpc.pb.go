// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1alpha1/currencyconverter/currency_converter_server.proto

package api_proto_v1alpha1_currencyconverter

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyConverterServiceClient is the client API for CurrencyConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyConverterServiceClient interface {
	// Get currency conversion.
	Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error)
	// Get currency conversions in batch.
	BatchConvert(ctx context.Context, in *BatchConversionRequest, opts ...grpc.CallOption) (*BatchConversionResponse, error)
	// List currency exchange rates.
	ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error)
}

type currencyConverterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyConverterServiceClient(cc grpc.ClientConnInterface) CurrencyConverterServiceClient {
	return &currencyConverterServiceClient{cc}
}

func (c *currencyConverterServiceClient) Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error) {
	out := new(ConversionResponse)
	err := c.cc.Invoke(ctx, "/api.proto.v1alpha1.currency.converter.CurrencyConverterService/Convert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyConverterServiceClient) BatchConvert(ctx context.Context, in *BatchConversionRequest, opts ...grpc.CallOption) (*BatchConversionResponse, error) {
	out := new(BatchConversionResponse)
	err := c.cc.Invoke(ctx, "/api.proto.v1alpha1.currency.converter.CurrencyConverterService/BatchConvert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyConverterServiceClient) ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error) {
	out := new(ListExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/api.proto.v1alpha1.currency.converter.CurrencyConverterService/ListExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyConverterServiceServer is the server API for CurrencyConverterService service.
// All implementations should embed UnimplementedCurrencyConverterServiceServer
// for forward compatibility
type CurrencyConverterServiceServer interface {
	// Get currency conversion.
	Convert(context.Context, *ConversionRequest) (*ConversionResponse, error)
	// Get currency conversions in batch.
	BatchConvert(context.Context, *BatchConversionRequest) (*BatchConversionResponse, error)
	// List currency exchange rates.
	ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error)
}

// UnimplementedCurrencyConverterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCurrencyConverterServiceServer struct {
}

func (UnimplementedCurrencyConverterServiceServer) Convert(context.Context, *ConversionRequest) (*ConversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) BatchConvert(context.Context, *BatchConversionRequest) (*BatchConversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchConvert not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchangeRates not implemented")
}

// UnsafeCurrencyConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyConverterServiceServer will
// result in compilation errors.
type UnsafeCurrencyConverterServiceServer interface {
	mustEmbedUnimplementedCurrencyConverterServiceServer()
}

func RegisterCurrencyConverterServiceServer(s grpc.ServiceRegistrar, srv CurrencyConverterServiceServer) {
	s.RegisterService(&CurrencyConverterService_ServiceDesc, srv)
}

func _CurrencyConverterService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.v1alpha1.currency.converter.CurrencyConverterService/Convert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).Convert(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyConverterService_BatchConvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).BatchConvert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.v1alpha1.currency.converter.CurrencyConverterService/BatchConvert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).BatchConvert(ctx, req.(*BatchConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyConverterService_ListExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).ListExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.v1alpha1.currency.converter.CurrencyConverterService/ListExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).ListExchangeRates(ctx, req.(*ListExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyConverterService_ServiceDesc is the grpc.ServiceDesc for CurrencyConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.v1alpha1.currency.converter.CurrencyConverterService",
	HandlerType: (*CurrencyConverterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Convert",
			Handler:    _CurrencyConverterService_Convert_Handler,
		},
		{
			MethodName: "BatchConvert",
			Handler:    _CurrencyConverterService_BatchConvert_Handler,
		},
		{
			MethodName: "ListExchangeRates",
			Handler:    _CurrencyConverterService_ListExchangeRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha1/currencyconverter/currency_converter_server.proto",
}
